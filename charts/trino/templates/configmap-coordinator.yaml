apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "trino.coordinator" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: coordinator
data:
  node.properties: |
    node.environment={{ .Values.server.node.environment }}
    node.data-dir={{ .Values.server.node.dataDir }}
    plugin.dir={{ .Values.server.node.pluginDir }}
  {{- range $configValue := .Values.additionalNodeProperties }}
    {{ $configValue }}
  {{- end }}

  jvm.config: |
    -server
    -Xmx{{ .Values.server.jvm.maxHeapSize }}
    -XX:+{{ .Values.server.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.server.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    -XX:-UseBiasedLocking
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.nio.maxCachedBufferSize=2000000
  {{- range $configValue := .Values.additionalJVMConfig }}
    {{ $configValue }}
  {{- end }}

  config.properties: |
    coordinator=true
{{- if gt (int .Values.server.workers) 0 }}
    node-scheduler.include-coordinator=false
{{- else }}
    node-scheduler.include-coordinator=true
{{- end }}
    http-server.http.port={{ .Values.service.port }}
    query.max-memory={{ .Values.server.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.server.config.query.maxMemoryPerNode }}
    query.max-memory={{ .Values.server.config.query.maxTotalMemory }}
    query.max-total-memory-per-node={{ .Values.server.config.query.maxTotalMemoryPerNode }}
    memory.heap-headroom-per-node={{ .Values.server.config.memory.heapHeadroomPerNode }}
    discovery-server.enabled=true
    discovery.uri=http://localhost:{{ .Values.service.port }}
  {{- range $configValue := .Values.additionalConfigProperties }}
    {{ $configValue }}
  {{- end }}

  log.properties: |
    io.trino={{ .Values.server.log.trino.level }}
  {{- range $configValue := .Values.additionalLogProperties }}
    {{ $configValue }}
  {{- end }}

{{- if .Values.server.config.authenticationType }}{{- if eq .Values.server.config.authenticationType "PASSWORD" }}
  password-authenticator.properties: |
    password-authenticator.name=file
    file.password-file={{ .Values.server.config.path }}/auth/password.db
{{- end }}{{- end }}

{{- if .Values.accessControl }}{{- if .Values.accessControl.type }}
  access-control.properties: |
    access-control.name=file
    security.refresh-period={{ .Values.accessControl.refreshPeriod | default "1s" }}
    security.config-file={{ .Values.server.config.path }}/access-control/{{ .Values.accessControl.configFile | default "rules.json" }}
{{- end }}{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: schemas-volume-coordinator
  labels:
    {{- include "trino.labels" . | nindent 4 }}
    app.kubernetes.io/component: coordinator
data:
  {{- range $key, $val := .Values.schemas }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}

---

{{- if .Values.accessControl }}{{- if eq .Values.accessControl.type "configmap" }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-access-control-volume-coordinator
  labels:
    {{- include "trino.labels" . | nindent 4 }}
    app.kubernetes.io/component: coordinator
data:
  {{- range $key, $val := .Values.accessControl.rules }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
{{- end }}{{- end }}

---
