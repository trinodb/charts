{{- $workerJmx := merge .Values.jmx.worker (omit .Values.jmx "coordinator" "worker") -}}
{{- $workerSvcSpecOverride := index .Values.worker.service "spec" | default dict -}}
{{- $workerSvcAnnotations := deepCopy .Values.service.annotations | merge (index .Values.worker.service "annotations" | default dict) -}}
{{- $workerSvcIsLoadBalancer := eq (index $workerSvcSpecOverride "type" | default "") "LoadBalancer" -}}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "trino.fullname" . }}-worker
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "trino.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
  annotations:
    {{- toYaml $workerSvcAnnotations | nindent 4 }}
spec:
  {{- if gt (len $workerSvcSpecOverride) 0 }}
  {{- toYaml $workerSvcSpecOverride | nindent 2 }}
  {{- end }}

  {{- if not $workerSvcIsLoadBalancer }}
  clusterIP: None
  {{- end }}

  {{- if not (hasKey $workerSvcSpecOverride "ports") }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
    {{- if $workerJmx.exporter.enabled }}
    - port: {{$workerJmx.exporter.port }}
      targetPort: jmx-exporter
      protocol: TCP
      name: jmx-exporter
    {{- end }}
    {{- range $key, $value := .Values.worker.additionalExposedPorts }}
    - port: {{ $value.servicePort }}
      name: {{ $value.name }}
      targetPort: {{ $value.port }}
      protocol: {{ $value.protocol }}
      {{- if $value.nodePort }}
      nodePort: {{ $value.nodePort }}
      {{- end }}
    {{- end }}
  {{- end }}

  {{- if not (hasKey $workerSvcSpecOverride "selector") }}
  selector:
    {{- include "trino.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: worker
  {{- end }}
